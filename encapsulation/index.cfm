<!---
    Create an instance of our ColdFusion component with
    synthesized accessors. The init() method has been coded
    manually, but everything else has been generated by
    ColdFusion at runtime.
--->
<cfset jennifer = new Girl( "Jennifer", 33 ) />

<!--- Output the result. --->
<cfdump
    var="#jennifer#"
    label="CFC With Synthesized Accessors"
    />


<!---
    Create an instance of our generic holder. This will hold
    arbitrary values in our variables scope which is where the
    synthesized accessors store their data.
--->
<cfset generic = new Generic() />

<!---
    Store alternative name and age properties so that this can
    walk like a girl and talk like a girl (ducktypeing... sort of).
--->
<cfset generic.set( "name", "Anna" ).set( "age", 35 ) />


<!--- ----------------------------------------------------- --->
<!--- ----------------------------------------------------- --->
<!--- ----------------------------------------------------- --->
<!--- ----------------------------------------------------- --->


<br />
<br />

<cfoutput>


    <!--- Get references to the sythesized methods. --->
    <cfset getAge = jennifer.getAge />
    <cfset setAge = jennifer.setAge />
    <cfset getName = jennifer.getName />
    <cfset setName = jennifer.setName />



    <!---
        Now, let's call the synthesized getters on the original
        component (that synthesized them).
    --->
    Original Call:<br />
    ---------------------------------------------------<br />
    Jennifer Name: #jennifer.getName()#<br />
    Jennifer Age: #jennifer.getAge()#<br />
    <br />



    <!---
        Now, let's call the synthesized getters on the page's
        variables' scope (ie. let's call it outside the context
        of any component).
    --->
    Free-Floating Call:<br />
    ---------------------------------------------------<br />
    Variables Name: #getName()#<br />
    Variables Age: #getAge()#<br />
    <br />



    <!---
        Now, call the setName / setAge on the free floating methods.
        Since ColdFusion's page context is always a "Variables"
        scope, this should think it's in a component context (hint:
        they're all just Page contexts).
    --->
    <cfset setName( "Paige" ) />
    <cfset setAge( 25 ) />

    <!--- Now, call the free-floating GETS again. --->
    Free-Floating Call (Post-SETTERS):<br />
    ---------------------------------------------------<br />
    Variables Name: #getName()#<br />
    Variables Age: #getAge()#<br />
    <br />



    <!---
        Now, let's attach the free-floating, sythensized accessor
        references to the Generic instance we created above.
    --->
    <cfset generic.getName = getName />
    <cfset generic.setName = setName />
    <cfset generic.getAge = getAge />
    <cfset generic.setAge = setAge />

    <!--- Try to update the age. It was 35, make it 37. --->
    <cfset generic.setAge( 37 ) />

    <!---
        And, let's try to call the synthesized accessors on the
        newly-contextual generic instance.
    --->
    Generic-Context Call:<br />
    ---------------------------------------------------<br />
    Generic Name: #generic.getName()#<br />
    Generic Age: #generic.getAge()#<br />
    <br />



    <!---
        Now, let's create a fake context in an attempt to override
        the access of the synthesized getter.
    --->
    <cfset fakeContext = {
        name = "Joanna",
		age = "45"
        } />

    <!---
        Try to call the getName() on the original Girl instance,
        but try various approaches to hi-jacking the variables
        search path.
    --->
    Fake-Context Call:<br />
    ---------------------------------------------------<br />
    Fake Name:
    #jennifer.getName(
        name = fakeContext.name,
        variables = fakeContext
        )#
	Fake Age:
	#jennifer.getAge(
        age = fakeContext.age,
        variables = fakeContext
        )#
    <br />
<cfdump var="#fakeContext#">
<cfset Joanna = new Girl( fakeContext.name,fakeContext.age ) />
Name: #Joanna.getName()#<br /> Age: #Joanna.getAge()#
</cfoutput>